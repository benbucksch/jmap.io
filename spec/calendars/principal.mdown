# Principals and Sharing

For systems that also support JMAP Sharing [RFC XXX], the calendars capability is used to indicate that this principal may be used with calendaring. A new method is defined to allow users to query availability when scehduling events.

## Principal Capability urn:ietf:params:jmap:calendars

A "urn:ietf:params:jmap:calendars" property is added to the Principal "capabilities" object, the value of which is an object with the following properties:

- **accountId**: `Id|null`
  Id of Account with the `urn:ietf:params:jmap:calendars` capability that
  contains the calendar data for this principal, or null if none (e.g. the Principal is a group just used for permissions management), or the user does not have access to any data in the account (with the exception of free/busy, which is governed by the mayGetAvailability property).
- **account**: `Account|null`
  The JMAP Account object corresponding to the accountId, null if none.
- **mayGetAvailability**: `Boolean`
  May the user call the "Principal/getAvailability" method with this Principal?
- **mayShareWith**: `Boolean`
  May the user add this principal as a calendar sharee (by adding them to the
  shareWith property of a calendar, see Section XXX)?
- **sendTo**: `String[String]|null`
  If this principal may be added as a participant to an event, this is the map of methods for adding it, in the same format as Participant#sendTo in JSEvent (see [@!RFC8984], Section 4.4.5).

## Principal/getAvailability

This method calculates the availability of the principal for scheduling within a requested time period. It takes the following arguments:

- **accountId**: `Id`
  The id of the account to use.
- **id**: `Id`
  The id of the Principal to calculate availability for.
- **utcStart**: `UTCDate`
  The start time (inclusive) of the period for which to return availability.
- **utcEnd**: `UTCDate`
  The end time (exclusive) of the period for which to return availability.
- **showDetails**: `Boolean`
  If true, event details will be returned if the user has permission to view them.
- **eventProperties**: `String[]|null`
  A list of properties to include in any JSEvent object returned. If `null`, all properties of the event will be returned. Otherwise, only properties with names in the given list will be returned.

The server will first find all relevant events, expanding any recurring events. Relevant events are ones where all of the following is true:

- The principal is subscribed to the calendar.
- Either the calendar belongs to the principal or the calendar account's
  "shareesActAs" property is "self".
- The "includeInAvailability" property of the calendar for the principal is
  "all" or "attending".
- The user has the "mayReadFreeBusy" permission for the calendar.
- The event finishes after the "utcStart" argument and starts before the
  "utcEnd" argument.
- The event's "privacy" property is not "secret".
- The "freeBusyStatus" property of the event is "busy" (or omitted, as this is
  the default).
- The "status" property of the event is not "cancelled".
- If the "includeInAvailability" property of the calendar is "attending", then
  the principal is a participant of the event, and has a "participationStatus" of "accepted" or "tentative".

If an event is in more than one calendar, it is relevant if all of the above are true for any one calendar that it is in.

The server then generates a BusyPeriod object for each of these events. A **BusyPeriod** object has the following properties:

- **utcStart**: `UTCDate`
  The start time (inclusive) of the period this represents.
- **utcEnd**: `UTCDate`
  The end time (exclusive) of the period this represents.
- **busyStatus**: `String` (optional, default "unavailable")
  This MUST be one of
  - `confirmed`: The event status is "confirmed".
  - `tentative`: The event status is "tentative".
  - `unavailable`: The principal is not available for scheduling at this time
    for any other reason.
- **event**: `JSEvent|null`
  The JSEvent representation of the event, or null if any of the following are true:

    - The "showDetails" argument is false.
    - The "privacy" property of the event is "private".
    - The user does not have the "mayReadItems" permission for any of the
      calendars the event is in.

    If an eventProperties argument was given, any properties in the JSEvent that are not in the eventProperties list are removed from the returned representation.

The server MAY also generate BusyPeriod objects based on other information it has about the principal's availability, such as office hours.

Finally, the server MUST merge and split BusyPeriod objects where the "event" property is null, such that none of them overlap and either there is a gap in time between any two objects (the utcEnd of one does not equal the utcStart of another) or those objects have a different busyStatus property. If there are overlapping BusyPeriod time ranges with different "busyStatus" properties the server MUST choose the value in the following order: confirmed > unavailable > tentative.

The response has the following argument:

- **list**: `BusyPeriod[]`
  The list of BusyPeriod objects calculated as described above.

The following additional errors may be returned instead of the
"Principal/getAvailability" response:

`notFound`: No principal with this id exists, or the user does not have
permission to see that this principal exists.

`forbidden`: The user does not have permission to query this principal's availability.

`tooLarge`: The duration between utcStart an utcEnd is longer than the server is willing to calculate availability for.

`rateLimit`: Too many availability requests have been made recently and the user is being rate limited. It may work to try again later.
