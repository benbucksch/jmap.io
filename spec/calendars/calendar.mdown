# Calendars

A Calendar is a named collection of events. All events are associated with at least one calendar.

A **Calendar** object has the following properties:

- **id**: `Id` (immutable; server-set)
  The id of the calendar.
- **name**: `String`
  The user-visible name of the calendar. This may be any UTF-8 string of at least 1 character in length and maximum 255 octets in size.
- **description**: `String|null` (default: null)
  An optional longer-form description of the calendar, to provide context in shared environments where users need more than just the name.
- **color**: `String|null` (default: null)
  A color to be used when displaying events associated with the calendar.

  If not null, the value MUST be a case-insensitive color name taken from the set of names defined in Section 4.3 of CSS Color Module Level 3 [COLORS](https://www.w3.org/TR/css-color-3/), or an RGB value in hexadecimal notation, as defined in Section 4.2.1 of CSS Color Module Level 3.

    The color SHOULD have sufficient contrast to be used as text on a white background.

- **sortOrder**: `UnsignedInt` (default: 0)
  Defines the sort order of calendars when presented in the client's UI, so it
  is consistent between devices. The number MUST be an integer in the range
  0 <= sortOrder < 2^31.

    A calendar with a lower order should be displayed before a calendar with
    a higher order in any list of calendars in the client's UI. Calendars with equal order SHOULD be sorted in alphabetical order by name.  The sorting should take into account locale-specific character order convention.

- **isSubscribed**: `Boolean`
  Has the user indicated they wish to see this Calendar in their client? This SHOULD default to false for Calendars in shared accounts the user has access to and true for any new Calendars created by the user themself.

    If false, the calendar should only be displayed when the user explicitly
    requests it or to offer it for the user to subscribe to.

- **isVisible**: `Boolean` (default: true)
  Should the calendar's events be displayed to the user at the moment? Clients MUST ignore this property if isSubscribed is false. If an event is in multiple calendars, it should be displayed if isVisible is true for any of those calendars.

- **includeInAvailability**: `String` (default: all)
  Should the calendar's events be used as part of availability calculation?
  This MUST be one of:

    - `all`: all events are considered.
    - `attending`: events the user is a confirmed or tentative participant of
      are considered.
    - `none`: all events are ignored (but may be considered if also in another
      calendar).

- **defaultAlertsWithTime**: `Id[Alert]|null`
  A map of alert ids to Alert objects (see [@!RFC8984], Section 4.5.2) to apply for events where "showWithoutTime" is false and "useDefaultAlerts" is true. Ids MUST be unique across all default alerts in the account, including those in other calendars; a UUID is recommended.

    If omitted on creation, the default is server dependent. For example, servers may choose to always default to `null`, or may copy the alerts from the default calendar.

- **defaultAlertsWithoutTime**: `Id[Alert]|null`
  A map of alert ids to Alert objects (see [@!RFC8984], Section 4.5.2) to apply for events where "showWithoutTime" is true and "useDefaultAlerts" is true. Ids MUST be unique across all default alerts in the account, including those in other calendars; a UUID is recommended.

    If omitted on creation, the default is server dependent. For example, servers may choose to always default to `null`, or may copy the alerts from the default calendar.

- **timeZone**: `String|null` (default: null)
  The time zone to use for events without a time zone when the server needs to resolve them into absolute time, e.g., for alerts or availability calculation. The value MUST be a time zone id from the IANA Time Zone Database [TZDB](https://www.iana.org/time-zones). If `null`, the timeZone of the account's associated Principal will be used. Clients SHOULD use this as the default for new events in this calendar if set.
- **shareWith**: `Id[CalendarRights]|null` (default: null)
  A map of Principal id to rights for principals this calendar is shared with. The principal to which this calendar belongs MUST NOT be in this set. This is null if the user requesting the object does not have the mayAdmin right, or if the calendar is not shared with anyone. May be modified only if the user has the mayAdmin right. The account id for the principals may be found in the `urn:ietf:params:jmap:principals:owner` capability of the Account to which the calendar belongs.

- **myRights**: `CalendarRights` (server-set)
  The set of access rights the user has in relation to this Calendar. If any event is in multiple calendars, the user has the following rights:

  - The user may fetch the event if they have the mayReadItems right on any
    calendar the event is in.
  - The user may remove an event from a calendar (by modifying the event's
    "calendarIds" property) if the user has the appropriate permission for that
    calendar.
  - The user may make other changes to the event if they have the right to do
    so in *all* calendars to which the event belongs.


A **CalendarRights** object has the following properties:

- **mayReadFreeBusy**: `Boolean`
  The user may read the free-busy information for this calendar as part of a call to Principal/getAvailability (see Section XXX).
- **mayReadItems**: `Boolean`
  The user may fetch the events in this calendar.
- **mayWriteAll**: `Boolean`
  The user may create, modify or destroy all events in this calendar, or move events to or from this calendar. If this is true, the mayWriteOwn, mayUpdatePrivate and mayRSVP properties MUST all also be true.
- **mayWriteOwn**: `Boolean`
  The user may create, modify or destroy an event on this calendar if either they are the owner of the event or the event has no owner. This means the user may also transfer ownership by updating an event so they are no longer an owner.
- **mayUpdatePrivate**: `Boolean`
  The user may modify per-user properties (see Section XXX) on all events in the calendar, even if they would not otherwise have permission to modify that event. If the shareesActAs account capability is "self", these properties MUST all be stored per-user, and changes do not affect any other user of the calendar. If shareesActAs is "secretary", the values are shared between all users.

    The user may also modify these properties on a per-occurrence basis for recurring events (updating the "recurrenceOverrides" property of the event to do so).

- **mayRSVP**: `Boolean`
  The user may modify the following properties of any Participant object that corresponds to one of the user's ParticipantIdentity objects in the account, even if they would not otherwise have permission to modify that event:

    - participationStatus
    - participationComment
    - expectReply
    - scheduleAgent
    - scheduleSequence
    - scheduleUpdated

    If the event has its "mayInviteSelf" property set to true (see Section XXX), then the user may also add a new Participant to the event with a sendTo property that is the same as the sendTo property of one of the user's ParticipantIdentity objects in the account. The roles property of the participant MUST only contain "attendee".

    If the event has its "mayInviteOthers" property set to true (see Section XXX) and there is an existing Participant in the event corresponding to one of the user's ParticipantIdentity objects in the account, then the user may also add new participants. The roles property of any new participant MUST only contain "attendee".

    The user may also do all of the above on a per-occurrence basis for recurring events (updating the recurrenceOverrides property of the event to do so).

- **mayAdmin**: `Boolean`
  The user may modify sharing for this calendar.
- **mayDelete**: `Boolean` (server-set)
  The user may delete the calendar itself. This property MUST be false if the account to which this calendar belongs has the *isReadOnly* property set to true.

The user is an **owner** for an event if the CalendarEvent object has a   "participants" property, and one of the Participant objects both:

    a) Has the "owner" role.
    b) Corresponds to one of the user's ParticipantIdentity objects in the account.

An event has no owner if its participants property is null or omitted, or if none of the Participant objects have the "owner" role.

## Calendar/get

This is a standard "/get" method as described in [@!RFC8620], Section 5.1. The *ids* argument may be `null` to fetch all at once.

If mayReadFreeBusy is the only permission the user has, the calendar MUST NOT be returned in Calendar/get and Calendar/query; it must behave as though it did not exist. The data is just used as part of Principal/getAvailability.

## Calendar/changes

This is a standard "/changes" method as described in [@!RFC8620], Section 5.2.

## Calendar/set

This is a standard "/set" method as described in [@!RFC8620], Section 5.3 but with the following additional request argument:

- **onDestroyRemoveEvents**: `Boolean` (default: false)

  If false, any attempt to destroy a Calendar that still has CalendarEvents
  in it will be rejected with a `calendarHasEvent` SetError. If
  true, any CalendarEvents that were in the Calendar will be removed from it, and if in no other Calendars they will be destroyed. This SHOULD NOT send scheduling messages to participants or create CalendarEventNotification objects.

The "shareWith" property may only be set by users that have the mayAdmin right. The value is shared across all users, although users without the mayAdmin right cannot see the value.

When modifying the shareWith property, the user cannot give a right to a principal if the principal did not already have that right and the user making the change also does not have that right. Any attempt to do so must be rejected with a `forbidden` SetError.

Users can subscribe or unsubscribe to a calendar by setting the "isSubscribed" property. The server MAY forbid users from subscribing to certain calendars even though they have permission to see them, rejecting the update with a `forbidden` SetError.

The "timeZone", "includeInAvailability", "defaultAlertsWithoutTime" and "defaultAlertsWithTime" properties are stored per-user if the calendar account's "shareesActAs" capability is "self", and may be set by any user who is subscribed to the calendar and has the mayUpdatePrivate right. Each user gets the default value for these properties as the initial value; they do not inherit an initial value from the calendar owner.

If the calendar account's "shareesActAs" capability is "secretary" these properties are instead shared, and may only be set by users that have the mayAdmin right.

The following properties may be set by anyone who is subscribed to the calendar and are always stored per-user:

- name
- color
- sortOrder
- isVisible

The "name" and "color" properties are initially inherited from the owner's copy of the calendar, but if set by a sharee that user gets their own copy of the property; it does not change for any other principals. If the value of the property in the owner's calendar changes after this, it does not overwrite the sharee's value.

The "sortOrder" and "isVisible" properties are initally the default value for each sharee; they are not inherited from the owner.

A calendar may be destroyed that is referenced as the "defaultCalendarId" in the CalenderPreferences object for the same account. If this occurs, the server MUST set the defaultCalendarId property on the CalendarPreferences to another calendar where the principal has the mayWriteAll right, if any, otherwise `null`.

The following extra SetError types are defined:

For "destroy":

- **calendarHasEvent**: The Calendar has at least one CalendarEvent assigned to
  it, and the "onDestroyRemoveEvents" argument was false.
