# ContactCards

A **ContactCard** object contains information about a person, company, or other entity, or represents a group of such entities. It is a JSContact ContactCard object, as defined in RFCXXXX, with the following additional properties:

- **id**: `Id` (immutable; server-set)
  The id of the ContactCard. The id uniquely identifies a JSContactCard with a particular "uid" within a particular account.
- **addressBookId**: `Id[Boolean]`
  The set of AddressBook ids this ContactCard belongs to. A card MUST belong to at least one AddressBook at all times (until it is destroyed). The set is represented as an object, with each key being an AddressBook id. The value for each key in the object MUST be true.

For any Media object in the card (see RFCXXX, Section XXX), a new property is defined:

- **blobId**: `Id`
  An id for the Blob representing the binary contents of the resource.

When returning ContactCards, any Media with a `data:` URI SHOULD return a `blobId` property and omit the `uri` property. The "mediaType" property MUST also be set. Similarly, when creating or updating a ContactCard, clients MAY send a `blobId` instead of the `uri` property for a Media object.

A contact card with a "kind" property equal to "group" represents a group of contacts. Clients often present these separately from other contact cards. The "members" property, as defined in RFC XXX, Section XXX, contains a set of UIDs for other contacts that are the members of this group. Clients should consider the group to contain any ContactCard with a matching UID, from any account they have access to with support for the `urn:ietf:params:jmap:contacts` capability. UIDs that cannot be found SHOULD be
ignored but preserved. For example, suppose a user adds contacts from a shared address book to their private set, then temporarily lose access to this address book. The UIDs cannot be resolved so the contacts will disappear from the group. However, if they are given permission to access the data again the UIDs will be found and the contacts will reappear.

## ContactCard/get

This is a standard "/get" method as described in [@!RFC8620], Section 5.1. The *ids* argument may be `null` to fetch all at once.

## ContactCard/changes

This is a standard "/changes" method as described in [@!RFC8620], Section 5.2.

## ContactCard/query

This is a standard "/query" method as described in [@!RFC8620], Section 5.5.

### Filtering

A **FilterCondition** object has the following properties:

- **inAddressBook**: `Id`
  An AddressBook id. A card must be in this address book to match the condition.
- **text**: `String|null`
  A card matches this condition if the text matches with text in the card.

If zero properties are specified on the FilterCondition, the condition MUST always evaluate to `true`. If multiple properties are specified, ALL must apply for the condition to be `true` (it is equivalent to splitting the object into one-property conditions and making them all the child of an AND filter operator).

The exact semantics for matching `String` fields is **deliberately not defined** to allow for flexibility in indexing implementation, subject to the following:

- Text SHOULD be matched in a case-insensitive manner.
- Text contained in either (but matched) single or double quotes SHOULD be treated as a **phrase search**, that is a match is required for that exact sequence of words, excluding the surrounding quotation marks. Use `\"`, `\'` and `\\` to match a literal `"`, `'` and `\` respectively in a phrase.
- Outside of a phrase, white-space SHOULD be treated as dividing separate tokens that may be searched for separately in the contact, but MUST all be present for the contact to match the filter.
- Tokens MAY be matched on a whole-word basis using stemming (so for example a text search for `bus` would match "buses" but not "business").

### Sorting

The following properties MUST be supported for sorting:

TODO

## ContactCard/queryChanges

This is a standard "/queryChanges" method as described in [@!RFC8620], Section 5.6.

## ContactCard/set

This is a standard "/set" method as described in [@!RFC8620], Section 5.3.

To set a new photo, the file must first be uploaded using the upload mechanism as described in [@!RFC8620], Section 6.1. This will give the client a valid blobId/size/type to use. The server SHOULD reject attempts to set a file that is not a recognised image type as the photo for a card.

## ContactCard/copy

This is a standard "/copy" method as described in [@!RFC8620], Section 5.4.

